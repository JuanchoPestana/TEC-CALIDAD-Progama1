//
//  Revisador.h
//  Lab1Final
//
//  Created by Juan Pestana on 8/31/17.
//  Copyright © 2017 DPSoftware. All rights reserved.
//
//=p-Revisador
// Clase de Revisador. Aqui se hace el proceso de contar lineas
//=b-0

#ifndef Revisador_h
#define Revisador_h

#include <algorithm>
#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include "Archivo.h"

using namespace std;

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// METODO ORDENAR

bool ordenar(Archivo archivo1, Archivo archivo2){
    
    return (archivo1.getLineasInformacion()<archivo2.getLineasInformacion());
    
}// END ORDENAR

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// CLASE

class Revisador{
    
public:
    
    // CONSTRUCTORES
    Revisador();
    Revisador(Archivo archivo);
    
    // METODOS
    void revisa(string nombre);
    void print();
    
private:
    // VARIABLES
    vector<Archivo> ListaArchivos;
    
};

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTOR DEFAULT
//=i
Revisador :: Revisador(){
    
    ListaArchivos.push_back(*new Archivo);
    
}// END CONSTRUCTOR DEFAULT

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTOR CON PARAMETROS
//=i
Revisador :: Revisador(Archivo archivo){
    
    ListaArchivos.push_back(archivo);
}// END CONSTRUCTOR PARAMETROS

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// METODO REVISA
//=i
void Revisador :: revisa(string nombre){
    
    ifstream ArchivoEntrada("Archivo1.txt");
    
    if (ArchivoEntrada.is_open()){
        
        cout << "pat" << endl;
        
        Archivo archivo = *new Archivo();
        string xs;
        
        int LineasBlancas = 0;
        int LineasInformacion = 0;
        
        while (getline(ArchivoEntrada, xs) )
        {
            // BORRAR ESPACIONS BLANCOS
            xs.erase( std::remove( xs.begin(), xs.end(), '\n' ), xs.end());
            xs.erase( std::remove( xs.begin(), xs.end(), '\r' ), xs.end());
            xs.erase( std::remove( xs.begin(), xs.end(), '\t' ), xs.end());
            xs.erase( std::remove( xs.begin(), xs.end(), ' ' ), xs.end());
            
            
            if(xs.empty()){
                
                LineasBlancas++;
                
            }else{
                
                LineasInformacion++;
            }
        }
        
        archivo.setNombre(nombre);
        archivo.setLineasBlancas(LineasBlancas);
        archivo.setLineasInformacion(LineasInformacion);
        
        ListaArchivos.push_back(archivo);
        ArchivoEntrada.close();
    }
    else
    {
        cout << "EL ARCHIVO SOLICITADO NO EXISTE" << endl;
    }
    
}// END REVISA

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCION PRINT
//=i
void Revisador :: print(){
    
    sort(ListaArchivos.begin(), ListaArchivos.end(), ordenar);
    
    int TotalArchivos = ListaArchivos.size() - 1.0;
    int TotalLineasBlancas = 0;
    int TotalLineasInformacion = 0;
    
    for (int ic = 1; ic <= TotalArchivos; ic++){
        
        cout << "Nombre archivo: " << ListaArchivos[ic].getNombre() << endl;
        cout << "Líneas blancas: " << ListaArchivos[ic].getLineasBlancas() << endl;
        cout << "Líneas información: " << ListaArchivos[ic].getLineasInformacion() << endl;
        
        TotalLineasBlancas += ListaArchivos[ic].getLineasBlancas();
        TotalLineasInformacion += ListaArchivos[ic].getLineasInformacion();
    }
    
    cout << "TOTAL: " << endl;
    cout << "Cantidad archivos: " << TotalArchivos << endl;
    cout << "Cantidad líneas blancas: " << TotalLineasBlancas << endl;
    cout << "Cantidad líneas información: " << TotalLineasInformacion << endl;
    
    
}// END PRINT




#endif /* Revisador_h */
